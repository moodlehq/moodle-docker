#!/usr/bin/env bash
set -e

# First find out if this was called from symlink,
# then find the real path of parent directory.
# This is needed because macOS does not have GNU realpath.
thisfile=$( readlink "${BASH_SOURCE[0]}" ) || thisfile="${BASH_SOURCE[0]}"
basedir="$( cd "$( dirname "$thisfile" )/../" && pwd -P )"

# Check for an environent file, and import it if found.
ENVFILE="${basedir}/.env"
if [ -f "$ENVFILE" ]
then
     SHDOTENV="${basedir}/shdotenv"
    if [ ! -f "${SHDOTENV}" ]
    then
        curl https://github.com/ko1nksm/shdotenv/releases/latest/download/shdotenv -L -o "${SHDOTENV}"
        chmod +x "${SHDOTENV}"
    fi
    eval "$(./shdotenv || echo "exit $?")"
fi

if [ ! -d "$MOODLE_DOCKER_WWWROOT" ];
then
    echo 'Error: $MOODLE_DOCKER_WWWROOT is not set or not an existing directory'
    exit 1
fi

if [ -z "$MOODLE_DOCKER_DB" ];
then
    echo 'Error: $MOODLE_DOCKER_DB is not set'
    exit 1
fi

export ASSETDIR="${basedir}/assets"

# Test if we have docker compose v2, and keep quiet if we don't.
ver=$(docker compose version > /dev/null 2>&1 && docker compose version --short) || true
if [[ $ver =~ ^v?2 ]]; then
  dockercompose="docker compose"
else
  echo 'Compose v2 is not available in Docker CLI, falling back to use docker-compose script'
  dockercompose="docker-compose"
fi
dockercompose="${dockercompose} -f ${basedir}/base.yml"
dockercompose="${dockercompose} -f ${basedir}/service.mail.yml"

# PHP Version.
export MOODLE_DOCKER_PHP_VERSION=${MOODLE_DOCKER_PHP_VERSION:-8.0}

# Database flavour.
dockercompose="${dockercompose} -f ${basedir}/db.${MOODLE_DOCKER_DB}.yml"

# Add support for version specific database settings.
if [ ! -z "$MOODLE_DOCKER_DB_VERSION" ];
then
    filename="${basedir}/db.${MOODLE_DOCKER_DB}.${MOODLE_DOCKER_DB_VERSION}.yml"
    if [ -f $filename ]; then
        dockercompose="${dockercompose} -f ${filename}"
    fi
fi

# Support PHP version overrides for DB not available any more.

# Expose DB port if requested.
if [[ $MOODLE_DOCKER_DB_PORT == *":"* ]] || [[ $MOODLE_DOCKER_DB_PORT -gt 0 ]]
then
    # If no bind ip has been configured (bind_ip:port), default to 127.0.0.1
    if [[ ! $MOODLE_DOCKER_DB_PORT == *":"* ]]
    then
        export MOODLE_DOCKER_DB_PORT=127.0.0.1:$MOODLE_DOCKER_DB_PORT
    fi
    filename="${basedir}/db.${MOODLE_DOCKER_DB}.port.yml"
    if [ -f $filename ];
    then
        dockercompose="${dockercompose} -f ${filename}"
    fi
fi

# Fix mobile app deprecated variables
if [ ! -z "$MOODLE_APP_VERSION" ];
then
    echo 'Warning: $MOODLE_APP_VERSION is deprecated, use $MOODLE_DOCKER_APP_VERSION instead'

    if [ -z "$MOODLE_DOCKER_APP_VERSION" ];
    then
        export MOODLE_DOCKER_APP_VERSION="$MOODLE_APP_VERSION"
    fi
fi

# Guess mobile app runtime
if [ -z "$MOODLE_DOCKER_APP_RUNTIME" ];
then
    if [[ ! -z "$MOODLE_DOCKER_APP_PATH" ]];
    then
        appversion="$(cat $MOODLE_DOCKER_APP_PATH/package.json | grep -oP '"version": "\K\d\.\d\.\d{1,2}(-\w+)?(?=")')"
    elif [[ ! -z "$MOODLE_DOCKER_APP_VERSION" ]];
    then
        appversion=$MOODLE_DOCKER_APP_VERSION
    fi

    if [[ ! -z $appversion ]];
    then
        if [[ ! -z "$(echo $appversion | grep -oP '\d\.\d\.\d{1,2}')" ]];
        then
            appmajorversion="$(echo $appversion | grep -oP '\d(?=\.\d\.\d{1,2})')"
            appminorversion="$(echo $appversion | grep -oP '\d\.\K\d(?=\.\d{1,2})')"
            apppatchversion="$(echo $appversion | grep -oP '\d\.\d\.\K\d{1,2}')"

            if (( $appmajorversion > 3 ));
            then
                export MOODLE_DOCKER_APP_RUNTIME="ionic5"
            elif (( $appminorversion != 9));
            then
                export MOODLE_DOCKER_APP_RUNTIME="ionic3"
            elif (( $apppatchversion < 5 ));
            then
                export MOODLE_DOCKER_APP_RUNTIME="ionic3"
            else
                export MOODLE_DOCKER_APP_RUNTIME="ionic5"
            fi
        else
            export MOODLE_DOCKER_APP_RUNTIME="ionic5"
        fi
    fi
fi

# Guess mobile app node version
if [[ -z "$MOODLE_DOCKER_APP_NODE_VERSION" ]] && [[ ! -z "$MOODLE_DOCKER_APP_PATH" ]] && [[ "$MOODLE_DOCKER_APP_RUNTIME" == "ionic5" ]];
then
    if [ -f "$MOODLE_DOCKER_APP_PATH/.nvmrc" ]; then
        appnodeversion="$(cat $MOODLE_DOCKER_APP_PATH/.nvmrc | grep -oP '(\d+\.?)+' || true)"

        export MOODLE_DOCKER_APP_NODE_VERSION="$appnodeversion"
    fi
fi

# Selenium browser
browserparts=(${MOODLE_DOCKER_BROWSER//:/ })
export MOODLE_DOCKER_BROWSER_NAME=${browserparts[0]}
export MOODLE_DOCKER_BROWSER_TAG=${browserparts[1]}

if [[ -z "$MOODLE_DOCKER_BROWSER_NAME" ]];
then
    MOODLE_DOCKER_BROWSER_NAME=firefox
fi

if [[ -z "$MOODLE_DOCKER_BROWSER_TAG" ]];
then
    if [[ "$MOODLE_DOCKER_BROWSER_NAME" = "firefox" ]];
    then
        MOODLE_DOCKER_BROWSER_TAG=3
    elif [[ "$MOODLE_DOCKER_BROWSER_NAME" = "chrome" ]];
    then
        MOODLE_DOCKER_BROWSER_TAG=3
    fi
fi

# Mobile app for development
if [[ "$MOODLE_DOCKER_BROWSER_NAME" == "chrome" ]];
then
    if [[ ! -z "$MOODLE_DOCKER_APP_PATH" ]];
    then
        dockercompose="${dockercompose} -f ${basedir}/moodle-app-dev-$MOODLE_DOCKER_APP_RUNTIME.yml"
    elif [[ ! -z "$MOODLE_DOCKER_APP_VERSION" ]];
    then
        # Mobile app using a docker image
        dockercompose="${dockercompose} -f ${basedir}/moodle-app-$MOODLE_DOCKER_APP_RUNTIME.yml"
    fi
fi

if [[ "$MOODLE_DOCKER_BROWSER_NAME" != "firefox" ]];
then
    dockercompose="${dockercompose} -f ${basedir}/selenium.${MOODLE_DOCKER_BROWSER_NAME}.yml"
fi

# Selenium VNC port
export MOODLE_DOCKER_SELENIUM_SUFFIX=""
if [[ $MOODLE_DOCKER_SELENIUM_VNC_PORT == *":"* ]] || [[ $MOODLE_DOCKER_SELENIUM_VNC_PORT -gt 0 ]]
then
    export MOODLE_DOCKER_SELENIUM_SUFFIX="-debug"
    # If no bind ip has been configured (bind_ip:port), default to 127.0.0.1
    if [[ ! $MOODLE_DOCKER_SELENIUM_VNC_PORT == *":"* ]]
    then
        MOODLE_DOCKER_SELENIUM_VNC_PORT=127.0.0.1:$MOODLE_DOCKER_SELENIUM_VNC_PORT
    fi
    dockercompose="${dockercompose} -f ${basedir}/selenium.debug.yml"
fi

# External services
if [[ ! -z "$MOODLE_DOCKER_PHPUNIT_EXTERNAL_SERVICES" ]];
then
    dockercompose="${dockercompose} -f ${basedir}/phpunit-external-services.yml"
fi

# BBB Mock
if [[ ! -z "$MOODLE_DOCKER_BBB_MOCK" ]];
then
    dockercompose="${dockercompose} -f ${basedir}/bbb-mock.yml"
fi

# Matrix Mock
if [[ ! -z "$MOODLE_DOCKER_MATRIX_MOCK" ]];
then
    dockercompose="${dockercompose} -f ${basedir}/matrix-mock.yml"
fi

#  Faildump directory
if [[ ! -z "$MOODLE_DOCKER_BEHAT_FAILDUMP" ]];
then
    if [ ! -d "$MOODLE_DOCKER_BEHAT_FAILDUMP" ];
    then
        echo 'Error: $MOODLE_DOCKER_BEHAT_FAILDUMP is not an existing directory'
        exit 1
    fi
    dockercompose="${dockercompose} -f ${basedir}/behat-faildump.yml"
fi

# Webserver host
export MOODLE_DOCKER_WEB_HOST=${MOODLE_DOCKER_WEB_HOST:-localhost}

# Webserver port
export MOODLE_DOCKER_WEB_PORT=${MOODLE_DOCKER_WEB_PORT:-8000}
if [[ $MOODLE_DOCKER_WEB_PORT == *":"* ]] || [[ $MOODLE_DOCKER_WEB_PORT -gt 0 ]]
then
    # If no bind ip has been configured (bind_ip:port), default to 127.0.0.1
    if [[ ! $MOODLE_DOCKER_WEB_PORT == *":"* ]]
    then
        MOODLE_DOCKER_WEB_PORT=127.0.0.1:$MOODLE_DOCKER_WEB_PORT
    fi
    dockercompose="${dockercompose} -f ${basedir}/webserver.port.yml"
fi


# Mac OS Compatbility
if [[ "$(uname)" == "Darwin" ]]; then
    # Support https://docs.docker.com/docker-for-mac/osxfs-caching/
    dockercompose="${dockercompose} -f ${basedir}/volumes-cached.yml"
fi

# Apply local customisations if a local.yml is found.
# Note: This must be the final modification before the docker-compose command is called.
localfile="${basedir}/local.yml"
if [ -f "${localfile}" ]
then
  echo "Including local options from ${localfile}"
  dockercompose="${dockercompose} -f ${localfile}"
fi

$dockercompose "$@"
